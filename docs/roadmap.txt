
Roadmap:
- Create dummy interfaces where possible and necessary (especially DBus interfaces) to make working on just one part of the system possible. Cost: 1 week.
- Select some C projects as milestones for the project. Cost: 1 day.
- Create CMake based build system. Cost: 1 day.
- Figure out which parts of GCC can be offloaded to the network (e.g. compiling without linking) and which can not (e.g. preprocessing, depencendy generation) and which are tricky to emulate (e.g. -march=native). Cost: 1 week.
- Write a prototype of the compiler service which does not include networking at all but instead only compiles locally. Cost: 2 weeks.
- Implement a basic GUI control program. Cost: 2 weeks.
- Implement the gcc compiler replacement. Cost: 2 weeks.
- Implement the networking parts of the compiler service. Cost: 3 weeks.
- Implement an easy-to-use solution for bootstrapping the network service over the internet. Cost: 1 week.
- Implement a make replacement shell script which just sets the proper compiler environment variables. Cost: 0.5 weeks.
- Testing, optimizing and writing documentation. Cost: As much as is left.

Optionally:
- Implement a priority based scheduling system. Cost: 1 week.
- Implement cross-compiler generation. Cost: 1 week.
- Figure out how usable the interface really is, with the help of people which have not used it before.
- Generate some fancy graphs about network usage over time while compiling a larger project.
- Extend the gcc replacement to handle C++ as well.
- Build easy-to-use packages for Ubuntu, Fedora, Gentoo.
- Optimize for battery usage and don't accept remote jobs when on battery.

